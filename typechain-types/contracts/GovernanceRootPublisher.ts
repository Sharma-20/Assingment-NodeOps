/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace GovernanceRootPublisher {
  export type ProposalStruct = {
    id: BigNumberish;
    description: string;
    actionData: BytesLike;
    actionDataHash: BytesLike;
    snapshotBlock: BigNumberish;
    exchangeRateSnapshot: BigNumberish;
    votingPowerRoot: BytesLike;
    rootPublished: boolean;
    executed: boolean;
    createdAt: BigNumberish;
  };

  export type ProposalStructOutput = [
    id: bigint,
    description: string,
    actionData: string,
    actionDataHash: string,
    snapshotBlock: bigint,
    exchangeRateSnapshot: bigint,
    votingPowerRoot: string,
    rootPublished: boolean,
    executed: boolean,
    createdAt: bigint
  ] & {
    id: bigint;
    description: string;
    actionData: string;
    actionDataHash: string;
    snapshotBlock: bigint;
    exchangeRateSnapshot: bigint;
    votingPowerRoot: string;
    rootPublished: boolean;
    executed: boolean;
    createdAt: bigint;
  };
}

export interface GovernanceRootPublisherInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProposal"
      | "executeProposal"
      | "getProposal"
      | "getVotingPowerAtBlock"
      | "nextProposalId"
      | "owner"
      | "proposalExists"
      | "proposals"
      | "publishVotingPowerRoot"
      | "renounceOwnership"
      | "transferOwnership"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "VotingPowerRootPublished"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerAtBlock",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalExists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishVotingPowerRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerAtBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishVotingPowerRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    description: string,
    actionData: BytesLike,
    actionDataHash: BytesLike,
    snapshotBlock: BigNumberish,
    exchangeRateSnapshot: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    description: string,
    actionData: string,
    actionDataHash: string,
    snapshotBlock: bigint,
    exchangeRateSnapshot: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    description: string;
    actionData: string;
    actionDataHash: string;
    snapshotBlock: bigint;
    exchangeRateSnapshot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, actionData: BytesLike];
  export type OutputTuple = [proposalId: bigint, actionData: string];
  export interface OutputObject {
    proposalId: bigint;
    actionData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerRootPublishedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    votingPowerRoot: BytesLike
  ];
  export type OutputTuple = [proposalId: bigint, votingPowerRoot: string];
  export interface OutputObject {
    proposalId: bigint;
    votingPowerRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernanceRootPublisher extends BaseContract {
  connect(runner?: ContractRunner | null): GovernanceRootPublisher;
  waitForDeployment(): Promise<this>;

  interface: GovernanceRootPublisherInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProposal: TypedContractMethod<
    [description: string, actionData: BytesLike],
    [bigint],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [GovernanceRootPublisher.ProposalStructOutput],
    "view"
  >;

  getVotingPowerAtBlock: TypedContractMethod<
    [user: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;

  nextProposalId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proposalExists: TypedContractMethod<
    [proposalId: BigNumberish],
    [boolean],
    "view"
  >;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        description: string;
        actionData: string;
        actionDataHash: string;
        snapshotBlock: bigint;
        exchangeRateSnapshot: bigint;
        votingPowerRoot: string;
        rootPublished: boolean;
        executed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  publishVotingPowerRoot: TypedContractMethod<
    [proposalId: BigNumberish, votingPowerRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [description: string, actionData: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [GovernanceRootPublisher.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPowerAtBlock"
  ): TypedContractMethod<
    [user: AddressLike, blockNumber: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextProposalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposalExists"
  ): TypedContractMethod<[proposalId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        boolean,
        boolean,
        bigint
      ] & {
        id: bigint;
        description: string;
        actionData: string;
        actionDataHash: string;
        snapshotBlock: bigint;
        exchangeRateSnapshot: bigint;
        votingPowerRoot: string;
        rootPublished: boolean;
        executed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "publishVotingPowerRoot"
  ): TypedContractMethod<
    [proposalId: BigNumberish, votingPowerRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerRootPublished"
  ): TypedContractEvent<
    VotingPowerRootPublishedEvent.InputTuple,
    VotingPowerRootPublishedEvent.OutputTuple,
    VotingPowerRootPublishedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalCreated(uint256,string,bytes,bytes32,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(uint256,bytes)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VotingPowerRootPublished(uint256,bytes32)": TypedContractEvent<
      VotingPowerRootPublishedEvent.InputTuple,
      VotingPowerRootPublishedEvent.OutputTuple,
      VotingPowerRootPublishedEvent.OutputObject
    >;
    VotingPowerRootPublished: TypedContractEvent<
      VotingPowerRootPublishedEvent.InputTuple,
      VotingPowerRootPublishedEvent.OutputTuple,
      VotingPowerRootPublishedEvent.OutputObject
    >;
  };
}
