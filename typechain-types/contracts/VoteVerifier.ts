/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VoteVerifier {
  export type VoteStruct = {
    proposalId: BigNumberish;
    voter: AddressLike;
    support: BigNumberish;
    votingPower: BigNumberish;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type VoteStructOutput = [
    proposalId: bigint,
    voter: string,
    support: bigint,
    votingPower: bigint,
    nonce: bigint,
    deadline: bigint
  ] & {
    proposalId: bigint;
    voter: string;
    support: bigint;
    votingPower: bigint;
    nonce: bigint;
    deadline: bigint;
  };

  export type ProposalVotingStruct = {
    proposalId: BigNumberish;
    votingPowerRoot: BytesLike;
    totalVotingPower: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    abstainVotes: BigNumberish;
    finalized: boolean;
    createdAt: BigNumberish;
  };

  export type ProposalVotingStructOutput = [
    proposalId: bigint,
    votingPowerRoot: string,
    totalVotingPower: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    finalized: boolean,
    createdAt: bigint
  ] & {
    proposalId: bigint;
    votingPowerRoot: string;
    totalVotingPower: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    finalized: boolean;
    createdAt: bigint;
  };
}

export interface VoteVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_NAME"
      | "DOMAIN_TYPEHASH"
      | "DOMAIN_VERSION"
      | "VOTE_TYPEHASH"
      | "castVote"
      | "finalizeVoting"
      | "getNonce"
      | "getProposalVoting"
      | "hasVoted"
      | "nonces"
      | "owner"
      | "proposals"
      | "renounceOwnership"
      | "setVotingPowerRoot"
      | "transferOwnership"
      | "voted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProposalPassed"
      | "VoteCast"
      | "VotingPowerRootSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [VoteVerifier.VoteStruct, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeVoting",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVoting",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPowerRoot",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voted",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPowerRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalPassedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    forVotes: BigNumberish,
    againstVotes: BigNumberish,
    abstainVotes: BigNumberish,
    totalVotingPower: BigNumberish
  ];
  export type OutputTuple = [
    proposalId: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    totalVotingPower: bigint
  ];
  export interface OutputObject {
    proposalId: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    totalVotingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    voter: AddressLike,
    support: BigNumberish,
    votingPower: BigNumberish,
    voteHash: BytesLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    voter: string,
    support: bigint,
    votingPower: bigint,
    voteHash: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    voter: string;
    support: bigint;
    votingPower: bigint;
    voteHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerRootSetEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    votingPowerRoot: BytesLike
  ];
  export type OutputTuple = [proposalId: bigint, votingPowerRoot: string];
  export interface OutputObject {
    proposalId: bigint;
    votingPowerRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoteVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): VoteVerifier;
  waitForDeployment(): Promise<this>;

  interface: VoteVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_NAME: TypedContractMethod<[], [string], "view">;

  DOMAIN_TYPEHASH: TypedContractMethod<[], [string], "view">;

  DOMAIN_VERSION: TypedContractMethod<[], [string], "view">;

  VOTE_TYPEHASH: TypedContractMethod<[], [string], "view">;

  castVote: TypedContractMethod<
    [
      vote: VoteVerifier.VoteStruct,
      signature: BytesLike,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  finalizeVoting: TypedContractMethod<
    [
      proposalId: BigNumberish,
      quorumThreshold: BigNumberish,
      supportThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getNonce: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;

  getProposalVoting: TypedContractMethod<
    [proposalId: BigNumberish],
    [VoteVerifier.ProposalVotingStructOutput],
    "view"
  >;

  hasVoted: TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;

  nonces: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        proposalId: bigint;
        votingPowerRoot: string;
        totalVotingPower: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        finalized: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setVotingPowerRoot: TypedContractMethod<
    [proposalId: BigNumberish, votingPowerRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  voted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DOMAIN_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VOTE_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [
      vote: VoteVerifier.VoteStruct,
      signature: BytesLike,
      merkleProof: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeVoting"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      quorumThreshold: BigNumberish,
      supportThreshold: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalVoting"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [VoteVerifier.ProposalVotingStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [proposalId: BigNumberish, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, boolean, bigint] & {
        proposalId: bigint;
        votingPowerRoot: string;
        totalVotingPower: bigint;
        forVotes: bigint;
        againstVotes: bigint;
        abstainVotes: bigint;
        finalized: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingPowerRoot"
  ): TypedContractMethod<
    [proposalId: BigNumberish, votingPowerRoot: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [string],
    "view"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalPassed"
  ): TypedContractEvent<
    ProposalPassedEvent.InputTuple,
    ProposalPassedEvent.OutputTuple,
    ProposalPassedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerRootSet"
  ): TypedContractEvent<
    VotingPowerRootSetEvent.InputTuple,
    VotingPowerRootSetEvent.OutputTuple,
    VotingPowerRootSetEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProposalPassed(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ProposalPassedEvent.InputTuple,
      ProposalPassedEvent.OutputTuple,
      ProposalPassedEvent.OutputObject
    >;
    ProposalPassed: TypedContractEvent<
      ProposalPassedEvent.InputTuple,
      ProposalPassedEvent.OutputTuple,
      ProposalPassedEvent.OutputObject
    >;

    "VoteCast(uint256,address,uint8,uint256,bytes32)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingPowerRootSet(uint256,bytes32)": TypedContractEvent<
      VotingPowerRootSetEvent.InputTuple,
      VotingPowerRootSetEvent.OutputTuple,
      VotingPowerRootSetEvent.OutputObject
    >;
    VotingPowerRootSet: TypedContractEvent<
      VotingPowerRootSetEvent.InputTuple,
      VotingPowerRootSetEvent.OutputTuple,
      VotingPowerRootSetEvent.OutputObject
    >;
  };
}
